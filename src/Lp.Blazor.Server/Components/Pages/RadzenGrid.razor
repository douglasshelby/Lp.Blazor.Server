@page "/gridview"
@using Lp.Blazor.Server.Data
@using Lp.Blazor.Server.Data.Models
@using Radzen
@using Radzen.Blazor
@using System;
@using System.Linq.Dynamic.Core
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JSRuntime
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject IOrderData OrderData


<RadzenMenu>
    <RadzenMenuItem Text="Grid Options">
        <RadzenMenuItem Text="Paging" Icon=@(_pagingEnabled?"check_circle":"circle") Value=@_pagingEnabled Click=@(()=>_pagingEnabled = !_pagingEnabled )></RadzenMenuItem>
        <RadzenMenuItem Text="Grouping" Icon=@(_allowGrouping?"check_circle":"circle") Value=@_allowGrouping Click=@(()=>_allowGrouping = !_allowGrouping)></RadzenMenuItem>
    </RadzenMenuItem>
</RadzenMenu>

<RadzenCard>
    <RadzenCard>
        <RadzenButton ButtonType="ButtonType.Button" Text="Load" Click=@(()=> Search()) IsBusy=@(_isLoading) />
        <RadzenButton ButtonType="ButtonType.Button" Text="Clear Filters" Click=@(()=>OnClearFilters()) />
    </RadzenCard>
    @*         <RadzenCheckBox @bind-Value=@_groupsExpanded Name="ExpandGroups" TValue="bool?" TriState="true" />
    <RadzenLabel Text="All groups expanded" Component="ExpandGroups" /> *@
    @*         <RadzenCheckBox @bind-Value=@_pagingEnabled Name="EnabledPaging" TValue="bool"/>
    <RadzenLabel Text="Enable Paging" Component="EnabledPaging" /> *@

</RadzenCard>

<RadzenDataGrid @ref="grid"
                LoadData="@OnLoadData"
                Count="@_count"
                AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="true"
                AllowVirtualization=_enableVirtualization
                FilterMode="FilterMode.Advanced"
                AllowSorting="true"
                PageSize=@_pageSize
                PageTitleFormat=""
                PagerHorizontalAlign="HorizontalAlign.Left"
                PageSizeOptions=@_pageSizeOptions
                PageSizeChanged=@OnPageSizeChanged
                AllowPaging=@_pagingEnabled
                Density="Density.Compact"
                GridLines=DataGridGridLines.Default
                AllowGrouping=_allowGrouping
                ShowGroupExpandColumn=@_showGroupExpandColumn
                GroupRowRender="OnGroupRowRender"
                ShowPagingSummary="true"
                Data="@_orders"
                TItem="Order"
                ColumnWidth="120px"
                IsLoading=@_isLoading
                LogicalFilterOperator="LogicalFilterOperator.And"
                FilterCleared=@OnFilterCleared
                Sort="@ShowLoading"
                Page="@ShowLoading"
                Group="@ShowLoading"
                Filter="@ShowLoading"
                class="m-10">
    <GroupHeaderTemplate>
        @context.GroupDescriptor.GetTitle(): @(context.Data.Key ?? "")
    </GroupHeaderTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="Order" Property="RowId" Title="ID" />
        <RadzenDataGridColumn TItem="Order" Property="OrderId" Title="OrderId" />
        <RadzenDataGridColumn TItem="Order" Property="OrderDate" Title="OrderDate">
            <Template Context="dataItem">
                @dataItem.ShipDate.ToString("MM/dd/yyy")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Order" Property="Season" Title="Season">
            <Template Context="dataItem">
                @dataItem.Season
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Order" Property="ShipDate" Title="ShipDate">
            <Template Context="dataItem">
                @dataItem.ShipDate.ToString("MM/dd/yyy")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Order" Property="ProductId" Title="ProductId" />
        <RadzenDataGridColumn TItem="Order" Property="Category" Title="Category" />
        <RadzenDataGridColumn TItem="Order" Property="SubCategory" Title="SubCat" />
        <RadzenDataGridColumn TItem="Order" Property="ProductName" Title="ProductName" />
        <RadzenDataGridColumn TItem="Order" Property="ShipMode" Title="ShipMode" />
        <RadzenDataGridColumn TItem="Order" Property="Sales" Title="Sales" Width="200px">
            <FooterTemplate>
                <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", _salesTotal)</b>
            </FooterTemplate>
            <GroupFooterTemplate>
                <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", context.Data.Items.Cast<Order>().Sum(o => o.Sales))</b>
            </GroupFooterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Order" Property="Quantity" Title="Qty">
            <FooterTemplate>
                <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0}", _quantityTotal)</b>
            </FooterTemplate>
            <GroupFooterTemplate>
                <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0}", context.Data.Items.Cast<Order>().Sum(o => o.Quantity))</b>
            </GroupFooterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Order" Property="Profit" Title="Profit">
            <FooterTemplate>
                <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", _profitTotal)</b>
            </FooterTemplate>
            <GroupFooterTemplate>
                <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", context.Data.Items.Cast<Order>().Sum(o => o.Profit))</b>
            </GroupFooterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Order" Property="CustomerId" Title="CustomerId" FormatString="{0:d}" />
        <RadzenDataGridColumn TItem="Order" Property="CustomerName" Title="CustomerName" FormatString="{0:d}" />
        <RadzenDataGridColumn TItem="Order" Property="Segment" Title="Segment" />
        <RadzenDataGridColumn TItem="Order" Property="Country" Title="Country" />
        <RadzenDataGridColumn TItem="Order" Property="City" Title="City" />
        <RadzenDataGridColumn TItem="Order" Property="State" Title="State" />
        <RadzenDataGridColumn TItem="Order" Property="PostalCode" Title="Zip" />
        <RadzenDataGridColumn TItem="Order" Property="Region" Title="Region" />
    </Columns>
</RadzenDataGrid>

@code {
    //ui controls
    RadzenDataGrid<Order> grid;
    RadzenDatePicker<DateTime?> startDate;
    RadzenDatePicker<DateTime?> endDate;

    //data
    IEnumerable<Order> _orders = new List<Order>();
    IQueryable<Order> _orderQuery;
    decimal _salesTotal;
    decimal _profitTotal;
    int _quantityTotal;

    int _count = 0;
    bool _isLoading = false;
    //ui options
    bool _showGroupExpandColumn = true;
    bool? _groupsExpanded;
    bool _pagingEnabled = true;
    bool _enableVirtualization = false;
    bool _allowGrouping = false;
    int _pageSize = 20;
    IEnumerable<int> _pageSizeOptions = new int[] { 20, 50, 100 };

    string? _lastFilter;
    string? LastFilter
    {
        get
        {
            return string.IsNullOrEmpty(_lastFilter) ? " 1 = 1 " : _lastFilter;
        }
        set { _lastFilter = value; }
    }

    protected override async Task OnInitializedAsync()
    {
        _orderQuery = OrderData.GetOrders().AsQueryable<Order>();
        await base.OnInitializedAsync();
    }

    async Task OnFilterCleared()
    {
        //await Task.FromResult(Search());

    }

    async Task OnClearFilters()
    {
        foreach (var col in grid.ColumnsCollection)
        {
            grid.ClearFilter(col);
        }
        LastFilter = string.Empty;
    }

    async Task OnPageSizeChanged(int pageSize)
    {
        await Task.FromResult(_pageSize = pageSize);
    }

    async Task ShowLoading()
    {
        _isLoading = true;

        await Task.Yield();

        _isLoading = false;
    }

    async Task Search()
    {
        await OnLoadData(new LoadDataArgs
            {
                Top = _pageSize,
                Skip = 0
            });
    }

    async Task OnLoadData(LoadDataArgs args)
    {
        await ShowLoading();

        var query = OrderData.GetOrders().AsQueryable<Order>();

        if (!string.IsNullOrEmpty(args.Filter) && LastFilter != args.Filter)
        {
            args.Skip = 0;
        }

        if (!string.IsNullOrEmpty(args.Filter))
        {
            LastFilter = args.Filter;
            query = query.Where(args.Filter);
            _count = query.Count();
            _profitTotal = query.Sum(o => o.Profit);
            _quantityTotal = query.Sum(o => o.Quantity);
            _salesTotal = query.Sum(o => o.Sales);
        }
        else
        {
            _count = OrderData.GetOrders().Count();
            _profitTotal = OrderData.GetOrders().Sum(o => o.Profit);
            _quantityTotal = OrderData.GetOrders().Sum(o => o.Quantity);
            _salesTotal = OrderData.GetOrders().Sum(o => o.Sales);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        _orders = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
    }

    void OnGroupRowRender(GroupRowRenderEventArgs args)
    {
        args.Expanded = _groupsExpanded;
    }

    void OnRender(DataGridRenderEventArgs<Order> args)
    {
        if (args.FirstRender)
        {
            args.Grid.Groups.Add(new GroupDescriptor() { Property = "ProductId", SortOrder = SortOrder.Descending });
            StateHasChanged();
        }
    }
}
