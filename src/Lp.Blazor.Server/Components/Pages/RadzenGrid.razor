@page "/gridview"
@using Lp.Blazor.Server.Data
@using Lp.Blazor.Server.Data.Models
@using Radzen
@using Radzen.Blazor
@using System;
@using System.Linq.Dynamic.Core
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JSRuntime
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject IOrderData OrderData
<div class="col-md-10">
    <RadzenMenu>
        <RadzenMenuItem Text="Grid Options">
            <RadzenMenuItem Text="Virtualization" Icon=@(_enableVirtualization?"check_circle":"circle") Value=@_enableVirtualization Click=@((args)=>_enableVirtualization = !_enableVirtualization)></RadzenMenuItem>
            <RadzenMenuItem Text="Paging" Icon=@(_pagingEnabled?"check_circle":"circle") Value=@_pagingEnabled Click=@((args)=>_pagingEnabled = !_pagingEnabled)></RadzenMenuItem>
            <RadzenMenuItem Text="Grouping" Icon=@(_allowGrouping?"check_circle":"circle") Value=@_allowGrouping Click=@((args)=>_allowGrouping = !_allowGrouping)></RadzenMenuItem>
        </RadzenMenuItem>
    </RadzenMenu>
</div>
<RadzenCard>
    <RadzenCard>
        <div class="row">
            <div class="col-md-5">
                <RadzenTemplateForm TItem="QueryOptions" Data=@_queryOptions Submit=@Search>
                    <RadzenFieldset Text="Query Parameters">
                        <RadzenLabel Text="Start Date" Component="StartDate" Style="margin-right: 8px; vertical-align: middle;" />
                        <RadzenDatePicker @ref=startDate Name="StartDate" @bind-Value=@_queryOptions.StartDate ShowTime=false DateFormat="MM/dd/yyyy" Min="@_minDate" Max="@_maxDate" />
                        <RadzenCustomValidator Style="margin-right: 8px; vertical-align: middle;" Component="StartDate" Validator="@(() => _queryOptions.Validate().Count() == 0)" Text="Must be before End Date" />
                        <RadzenLabel Text="End Date" Component="EndDate" Style="margin-right: 8px; vertical-align: middle;" />
                        <RadzenDatePicker @ref=endDate Name="EndDate" @bind-Value=@_queryOptions.EndDate ShowTime=false DateFormat="MM/dd/yyyy" Min="@_minDate" Max="@_maxDate" />
                        <RadzenCustomValidator Style="margin-right: 8px; vertical-align: middle;" Component="EndDate" Validator="@(() => _queryOptions.Validate().Count() == 0)" Text="Must be after Start Date" />
                    </RadzenFieldset>

                    <RadzenButton ButtonType="ButtonType.Submit" Text="Load" IsBusy=@(_isLoading) />
                </RadzenTemplateForm>
            </div>
        </div>
    </RadzenCard>
    @*         <RadzenCheckBox @bind-Value=@_groupsExpanded Name="ExpandGroups" TValue="bool?" TriState="true" />
    <RadzenLabel Text="All groups expanded" Component="ExpandGroups" /> *@
    @*         <RadzenCheckBox @bind-Value=@_pagingEnabled Name="EnabledPaging" TValue="bool"/>
    <RadzenLabel Text="Enable Paging" Component="EnabledPaging" /> *@

</RadzenCard>

<RadzenDataGrid @ref="grid"
                LoadData="@LoadData"
                Count="@_count"
                AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="true"
                AllowVirtualization=_enableVirtualization
                FilterMode="FilterMode.Advanced"
                AllowSorting="true"
                PageSize="200"
                PageTitleFormat=""
                AllowPaging=@_pagingEnabled
                Density="Density.Compact"
                GridLines=DataGridGridLines.Default
                PagerHorizontalAlign="HorizontalAlign.Left"
                AllowGrouping=_allowGrouping
                ShowGroupExpandColumn=@_showGroupExpandColumn
                GroupRowRender="OnGroupRowRender"
                ShowPagingSummary="true"
                Data="@_orders"
                TItem="Order"
                ColumnWidth="120px"
                IsLoading=@_isLoading
                LogicalFilterOperator="LogicalFilterOperator.Or"
                Sort="@ShowLoading"
                Page="@ShowLoading"
                Group="@ShowLoading"
                Filter="@ShowLoading"
                class="m-10">
    <GroupHeaderTemplate>
        @context.GroupDescriptor.GetTitle(): @(context.Data.Key ?? "")
    </GroupHeaderTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="Order" Property="RowId" Title="ID" />
        <RadzenDataGridColumn TItem="Order" Property="OrderId" Title="OrderId" />
        <RadzenDataGridColumn TItem="Order" Property="OrderDate" Title="OrderDate">
            <Template Context="dataItem">
                @dataItem.ShipDate.ToString("MM/dd/yyy")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Order" Property="Season" Title="Season">
            <Template Context="dataItem">
                @dataItem.Season
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Order" Property="ShipDate" Title="ShipDate">
            <Template Context="dataItem">
                @dataItem.ShipDate.ToString("MM/dd/yyy")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Order" Property="ProductId" Title="ProductId" />
        <RadzenDataGridColumn TItem="Order" Property="Category" Title="Category" />
        <RadzenDataGridColumn TItem="Order" Property="SubCategory" Title="SubCat" />
        <RadzenDataGridColumn TItem="Order" Property="ProductName" Title="ProductName" />
        <RadzenDataGridColumn TItem="Order" Property="ShipMode" Title="ShipMode" />
        <RadzenDataGridColumn TItem="Order" Property="Sales" Title="Sales" Width="200px">
            <FooterTemplate>
                <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", _orders?.Sum(o => o.Sales))</b>
            </FooterTemplate>
            <GroupFooterTemplate>
                <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", context.Data.Items.Cast<Order>().Sum(o => o.Sales))</b>
            </GroupFooterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Order" Property="Quantity" Title="Qty">
            <FooterTemplate>
                <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", _orders?.Sum(o => o.Quantity))</b>
            </FooterTemplate>
            <GroupFooterTemplate>
                <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0}", context.Data.Items.Cast<Order>().Sum(o => o.Quantity))</b>
            </GroupFooterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Order" Property="Profit" Title="Profit">
            <FooterTemplate>
                <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", _orders?.Sum(o => o.Profit))</b>
            </FooterTemplate>
            <GroupFooterTemplate>
                <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", context.Data.Items.Cast<Order>().Sum(o => o.Profit))</b>
            </GroupFooterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Order" Property="CustomerId" Title="CustomerId" FormatString="{0:d}" />
        <RadzenDataGridColumn TItem="Order" Property="CustomerName" Title="CustomerName" FormatString="{0:d}" />
        <RadzenDataGridColumn TItem="Order" Property="Segment" Title="Segment" />
        <RadzenDataGridColumn TItem="Order" Property="Country" Title="Country" />
        <RadzenDataGridColumn TItem="Order" Property="City" Title="City" />
        <RadzenDataGridColumn TItem="Order" Property="State" Title="State" />
        <RadzenDataGridColumn TItem="Order" Property="PostalCode" Title="Zip" />
        <RadzenDataGridColumn TItem="Order" Property="Region" Title="Region" />
    </Columns>
</RadzenDataGrid>

@code {
    //ui controls
    RadzenDataGrid<Order> grid;
    RadzenDatePicker<DateTime?> startDate;
    RadzenDatePicker<DateTime?> endDate;
    IEnumerable<Order> _orders = new List<Order>();
    IQueryable<Order> _orderQuery;

    int _count = 0;
    bool _isLoading = false;
    //ui options
    bool _showGroupExpandColumn = true;
    bool? _groupsExpanded;
    bool _pagingEnabled = true;
    bool _enableVirtualization = false;
    bool _allowGrouping = false;
    int _pageSize = 20;
    IEnumerable<int> _pageSizeOptions = new int[] { 10, 20, 30 };

    //query options
    QueryOptions _queryOptions = new QueryOptions();
    DateTime? _minDate;
    DateTime? _maxDate;
    DateTime? _startDate = DateTime.Now;
    DateTime? _endDate = DateTime.Now;

    string? _lastFilter = null;

    protected override async Task OnInitializedAsync()
    {
        var orders = OrderData.GetOrders();
        _queryOptions.StartDate = _queryOptions.MinStartDate = orders.Min(o => o.OrderDate);
        _queryOptions.EndDate = _queryOptions.MaxEndDate = orders.Max(o => o.OrderDate);
        await base.OnInitializedAsync();
    }


    async Task ShowLoading()
    {
        _isLoading = true;

        await Task.Yield();

        _isLoading = false;
    }

    async Task Search()
    {
        await LoadData(new LoadDataArgs
            {
                Top = _pageSize,
                Skip = 0
            });
    }

    bool DateValidator()
    {
        var results = _queryOptions.Validate(null);
        if (results.Count() == 0) return true;
        return false;
    }

    async Task LoadData(LoadDataArgs args)
    {
        await ShowLoading();

        var query = OrderData.GetOrders().AsQueryable<Order>();
        query
            .Where(o => o.OrderDate >= _startDate)
            .Where(o => o.OrderDate <= _endDate);

        if (!string.IsNullOrEmpty(args.Filter) && _lastFilter != args.Filter)
        {
            args.Skip = 0;
        }
        Console.WriteLine($"Skip: {args.Skip}, Top: {args.Top}");

        if (!string.IsNullOrEmpty(args.Filter))
        {
            _lastFilter = args.Filter;
            query = query.Where(args.Filter);
            _count = query.Count();
        }
        else
        {
            _count = OrderData.GetOrders().Count();
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        _orders = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
    }

    void OnGroupRowRender(GroupRowRenderEventArgs args)
    {
        args.Expanded = _groupsExpanded;
    }

    void OnRender(DataGridRenderEventArgs<Order> args)
    {
        if (args.FirstRender)
        {
            args.Grid.Groups.Add(new GroupDescriptor() { Property = "ProductId", SortOrder = SortOrder.Descending });
            StateHasChanged();
        }
    }
}
